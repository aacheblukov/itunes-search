{"version":3,"sources":["api/itunesAPI.js","store/actionTypes.js","utils.js","components/Song/index.js","store/actions.js","components/Field/index.js","components/Select/index.js","components/Inputs/index.js","components/Main/index.js","serviceWorker.js","store/reducer.js","store/index.js","index.js"],"names":["status","response","Promise","resolve","reject","Error","statusText","searchSinger","query","searchQuery","split","join","fetch","concat","then","data","json","results","error","ActionTypes","LoadingState","SongItem","_ref","_ref$song","song","previewUrl","artworkUrl100","trackName","collectionName","trackTimeMillis","audioSrc","useSelector","s","dispatch","useDispatch","react_default","a","createElement","className","onClick","type","payload","style","backgroundImage","millis","minutes","Math","floor","seconds","toFixed","millisToMinutesAndSeconds","SongField","_useSelector","songs","album","loadingState","_useState","useState","_useState2","Object","slicedToArray","filteredSongs","setFilteredSongs","filterByAlbum","items","filter","item","filterBySong","toLowerCase","includes","useEffect","fSongs","reduce","res","f","spin","size","length","map","index","Song","key","SelectAlbum","Option","Select","options","handleChange","value","setAlbum","es_select","onChange","onSearch","label","SingerInput","Search","Input","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","trim","abrupt","sent","stop","_x","apply","this","arguments","enterButton","placeholder","SongInput","input","e","target","ITunesSearch","console","debug","Fragment","Inputs_SingerInput","Inputs_SongInput","Field","src","autoPlay","Boolean","window","location","hostname","match","initState","apiData","reducer","state","undefined","action","objectSpread","_action$payload","track","artistName","albums","toConsumableArray","Set","createOptions","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","Main","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4dc1f35b.chunk.js","sourcesContent":["const status = response => {\r\n  if (response.status !== 200) {\r\n    if (response.status === 404)\r\n      return Promise.resolve(\"We haven't found this singer in iTunes\");\r\n    if (response.status === 400) return Promise.resolve(\"Incorrect request\");\r\n    return Promise.reject(new Error(response.statusText));\r\n  }\r\n  return Promise.resolve(response);\r\n};\r\n\r\nexport const searchSinger = query => {\r\n  const searchQuery = query.split(\" \").join(\"+\");\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      fetch(\r\n        `https://cors-anywhere.herokuapp.com/https://itunes.apple.com/search?term=${searchQuery}&limit=500`,\r\n        {}\r\n      )\r\n        .then(status)\r\n        .then(data => data.json())\r\n        .then(data => {\r\n          resolve(data.results);\r\n        });\r\n    } catch (error) {\r\n      reject(new Error(error));\r\n    }\r\n  });\r\n};\r\n","export const ActionTypes = {\r\n  GET_DATA_REQUEST: \"GET_DATA_REQUEST\",\r\n  GET_DATA_SUCCESS: \"GET_DATA_SUCCESS\",\r\n  FILTER_BY_ARTIST: \"FILTER_BY_ARTIST\",\r\n  SET_ALBUM: \"SET_ALBUM\",\r\n  SET_SONG: \"SET_SONG\",\r\n  PLAY_SONG: \"PLAY_SONG\"\r\n};\r\n","export const createOptions = albums =>\r\n  albums.map(album => ({ value: album, label: album }));\r\nexport const millisToMinutesAndSeconds = millis => {\r\n  const minutes = Math.floor(millis / 60000);\r\n  const seconds = ((millis % 60000) / 1000).toFixed(0);\r\n  return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\r\n};\r\nexport const LoadingState = {\r\n  NO_REQUEST: 0,\r\n  REQUEST: 1,\r\n  SUCCESS: 2\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { playSong } from \"../../store/actions\";\r\nimport { millisToMinutesAndSeconds } from \"../../utils\";\r\nimport \"./style.css\";\r\nconst SongItem = ({\r\n  song: {\r\n    previewUrl,\r\n    artworkUrl100,\r\n    trackName,\r\n    collectionName,\r\n    trackTimeMillis\r\n  }\r\n}) => {\r\n  const { audioSrc } = useSelector(s => s);\r\n  const dispatch = useDispatch();\r\n  const play = () => {\r\n    dispatch(playSong(previewUrl === audioSrc ? \"\" : previewUrl));\r\n  };\r\n  return (\r\n    <div className=\"song-item\" onClick={play}>\r\n      <div\r\n        className=\"cover\"\r\n        style={{\r\n          backgroundImage: \"url(\" + artworkUrl100 + \")\"\r\n        }}\r\n      />\r\n      <div className=\"track-info\">\r\n        <span>{trackName}</span>\r\n        <span>{collectionName}</span>\r\n        <span>{millisToMinutesAndSeconds(trackTimeMillis)}</span>\r\n      </div>\r\n      <div\r\n        className={` song-icon ${previewUrl === audioSrc ? \"pause\" : \"play\"}`}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SongItem;\r\n","import { searchSinger } from \"../api/itunesAPI\";\r\nimport { ActionTypes } from \"./actionTypes\";\r\nimport { LoadingState } from \"../utils\";\r\n\r\nexport const getDataFromApi = searchQuery => async dispatch => {\r\n  if (!searchQuery.trim()) {\r\n    return;\r\n  }\r\n  dispatch({\r\n    type: ActionTypes.GET_DATA_REQUEST,\r\n    payload: { loadingState: LoadingState.REQUEST }\r\n  });\r\n  const data = await searchSinger(searchQuery);\r\n  dispatch({\r\n    type: ActionTypes.GET_DATA_SUCCESS,\r\n    payload: { data, searchQuery, loadingState: LoadingState.SUCCESS }\r\n  });\r\n};\r\nexport const setAlbum = value => ({\r\n  type: ActionTypes.SET_ALBUM,\r\n  payload: value\r\n});\r\nexport const setSong = value => ({\r\n  type: ActionTypes.SET_SONG,\r\n  payload: value\r\n});\r\nexport const playSong = value => ({\r\n  type: ActionTypes.PLAY_SONG,\r\n  payload: value\r\n});\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport SongItem from \"../Song\";\r\nimport \"./style.css\";\r\nimport { Spin } from \"antd\";\r\nimport { LoadingState } from \"../../utils\";\r\nconst SongField = () => {\r\n  const { songs, album, song, loadingState } = useSelector(s => s);\r\n  const [filteredSongs, setFilteredSongs] = useState(songs);\r\n\r\n  const filterByAlbum = items => {\r\n    if (!album) return items;\r\n    return items.filter(item => item.collectionName === album);\r\n  };\r\n  const filterBySong = items => {\r\n    if (!song) return items;\r\n    return items.filter(item =>\r\n      item.trackName.toLowerCase().includes(song.toLowerCase())\r\n    );\r\n  };\r\n  const filterMap = (items, filterArray) => {\r\n    const fItems = filterArray.reduce((res, f) => {\r\n      return f(res);\r\n    }, items);\r\n    return fItems;\r\n  };\r\n  useEffect(() => {\r\n    const fSongs = filterMap(songs, [filterByAlbum, filterBySong]);\r\n    setFilteredSongs(fSongs);\r\n  }, [song, album, songs]);\r\n\r\n  return (\r\n    <div className=\"field-wrapper\">\r\n      {loadingState === LoadingState.REQUEST ? (\r\n        <Spin size=\"large\" />\r\n      ) : (\r\n        <div className=\"song-field\">\r\n          {filteredSongs.length || !loadingState\r\n            ? filteredSongs.map((song, index) => (\r\n                <SongItem key={index} song={song} />\r\n              ))\r\n            : \"We haven't found songs :(\"}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SongField;\r\n","import React from \"react\";\r\nimport { Select } from \"antd\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setAlbum } from \"../../store/actions\";\r\nimport \"./style.css\";\r\nconst SelectAlbum = () => {\r\n  const { Option } = Select;\r\n  const { options } = useSelector(s => s);\r\n  const dispatch = useDispatch();\r\n  const handleChange = value => {\r\n    dispatch(setAlbum(value));\r\n  };\r\n  return (\r\n    <Select\r\n      className=\"album-select\"\r\n      onChange={handleChange}\r\n      onSearch={handleChange}\r\n    >\r\n      {options.map(({ value, label }, index) => (\r\n        <Option value={value} key={index}>\r\n          {label}\r\n        </Option>\r\n      ))}\r\n    </Select>\r\n  );\r\n};\r\n\r\nexport default SelectAlbum;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getDataFromApi, setSong } from \"../../store/actions\";\r\nimport { Input } from \"antd\";\r\nimport \"./style.css\";\r\nexport const SingerInput = () => {\r\n  const { Search } = Input;\r\n  const dispatch = useDispatch();\r\n  const find = value => {\r\n    dispatch(getDataFromApi(value));\r\n  };\r\n  return (\r\n    <Search\r\n      className=\"input\"\r\n      onSearch={find}\r\n      enterButton\r\n      placeholder=\"Search by singer\"\r\n    />\r\n  );\r\n};\r\n\r\nexport const SongInput = () => {\r\n  const dispatch = useDispatch();\r\n  const change = e => {\r\n    dispatch(setSong(e.target.value));\r\n  };\r\n  return (\r\n    <Input className=\"input\" onChange={change} placeholder=\"Filter by song\" />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport SongField from \"../Field\";\r\nimport SelectAlbum from \"../Select\";\r\nimport { SingerInput, SongInput } from \"../Inputs\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./style.css\";\r\nconst ITunesSearch = () => {\r\n  const { audioSrc } = useSelector((s) => s);\r\n  console.debug(\"\");\r\n  return (\r\n    <>\r\n      <h1 className=\"header\">Search singers via Itunes API</h1>\r\n      <div className=\"inputs-wrapper\">\r\n        <SingerInput />\r\n        <SelectAlbum />\r\n        <SongInput />\r\n      </div>\r\n      <SongField />\r\n      <audio src={audioSrc} autoPlay />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ITunesSearch;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { ActionTypes } from \"./actionTypes\";\r\nimport { createOptions, LoadingState } from \"../utils\";\r\n\r\nconst initState = {\r\n  apiData: [],\r\n  album: \"\",\r\n  song: \"\",\r\n  audioSrc: \"\",\r\n  songs: [],\r\n  options: [{ value: \"\", label: \"All albums\" }],\r\n  loadingState: LoadingState.NO_REQUEST\r\n};\r\nconst reducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.GET_DATA_REQUEST: {\r\n      const { loadingState } = action.payload;\r\n\r\n      return { ...state, loadingState };\r\n    }\r\n    case ActionTypes.GET_DATA_SUCCESS: {\r\n      const { data, searchQuery, loadingState } = action.payload;\r\n      const songs = data.filter(\r\n        track => track.artistName.toLowerCase() === searchQuery.toLowerCase()\r\n      );\r\n      const albums = [...new Set(songs.map(item => item.collectionName))];\r\n      const options = [...initState.options, ...createOptions(albums)];\r\n      return {\r\n        ...initState,\r\n        songs,\r\n        options,\r\n        loadingState\r\n      };\r\n    }\r\n    case ActionTypes.SET_ALBUM: {\r\n      return { ...state, album: action.payload };\r\n    }\r\n    case ActionTypes.PLAY_SONG: {\r\n      return { ...state, audioSrc: action.payload };\r\n    }\r\n    case ActionTypes.SET_SONG: {\r\n      return { ...state, song: action.payload };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducer from \"./reducer\";\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Main from \"./components/Main\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Main />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}